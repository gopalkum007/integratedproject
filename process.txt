Process Management in Linux
Linux, like other operating systems, manages processes using various commands. Processes are programs that are running on the system, and each process is identified by a unique PID (Process ID). Process management involves handling the execution of processes, monitoring system performance, and managing resources efficiently.

Key Process Management Commands
ps (Process Status)

The ps command displays the currently running processes on the system. It shows information like PID, TTY (terminal), time, and the command used to launch the process.

Syntax:

css
Copy
Edit
ps [options]
Common options:

ps -e: Shows all running processes.

ps -ef: Provides full details of all running processes.

ps -aux: Displays processes with additional user details.

Example:

nginx
Copy
Edit
ps -ef
bg (Background Process)

The bg command is used to resume a suspended job in the background.

Syntax:

bash
Copy
Edit
bg [job_id]
A process can be suspended with Ctrl+Z, and then bg can be used to move it to the background.

Example:

bash
Copy
Edit
bg %1
This resumes the job with ID 1 in the background.

fg (Foreground Process)

The fg command brings a background job to the foreground.

Syntax:

bash
Copy
Edit
fg [job_id]
Example:

bash
Copy
Edit
fg %1
This brings job 1 to the foreground.

top (Task Manager)

The top command provides a real-time view of running processes and system resources, such as CPU and memory usage.

Syntax:

css
Copy
Edit
top
It displays processes in descending order of CPU usage by default.

Common keys to use while top is running:

q: Quit the top command.

P: Sort by CPU usage.

M: Sort by memory usage.

k: Kill a process.

du (Disk Usage)

The du command shows disk space used by files and directories.

Syntax:

bash
Copy
Edit
du [options] [file/directory]
Example:

bash
Copy
Edit
du -sh /home/user
This shows the total disk usage of the /home/user directory in a human-readable format.

sar (System Activity Reporter)

The sar command is used to collect, report, and save system activity information.

Syntax:

css
Copy
Edit
sar [options] [interval] [count]
Example:

nginx
Copy
Edit
sar -u 1 3
This reports CPU usage every 1 second for 3 intervals.

kill (Terminate Process)

The kill command is used to terminate a process by sending a signal to the process.

Syntax:

bash
Copy
Edit
kill [options] PID
Common options:

kill -9 PID: Sends the SIGKILL signal to forcefully terminate a process.

kill -15 PID: Sends the SIGTERM signal (default) to terminate a process gracefully.

Example:

bash
Copy
Edit
kill -9 1234
This forcefully kills the process with PID 1234.

nice (Set Process Priority)

The nice command is used to set the priority (niceness) of a process. Lower values indicate higher priority, and higher values indicate lower priority.

Syntax:

bash
Copy
Edit
nice -n [priority] [command]
Example:

bash
Copy
Edit
nice -n 10 command_name
This runs command_name with a niceness of 10, lowering its priority.

renice (Change Priority of Running Process)

The renice command is used to change the priority of an already running process.

Syntax:

css
Copy
Edit
renice -n [priority] -p [PID]
Example:

css
Copy
Edit
renice -n 15 -p 1234
This changes the priority of the process with PID 1234 to a niceness of 15.

at (Execute Command at a Specific Time)

The at command is used to schedule a one-time task to be executed at a specified time.

Syntax:

css
Copy
Edit
at [time]
Example:

nginx
Copy
Edit
at 10:30
After typing at 10:30, you can enter the commands you want to execute at that time, and then press Ctrl+D to submit.

cron (Scheduled Task Execution)

The cron daemon is used for scheduling recurring tasks. It reads the crontab file and executes the scheduled jobs at specific intervals.

Syntax (to edit crontab):

nginx
Copy
Edit
crontab -e
Crontab Format:

sql
Copy
Edit
* * * * * /path/to/command
┬ ┬ ┬ ┬ ┬
│ │ │ │ │
│ │ │ │ └─── Day of the week (0-6) (Sunday=0)
│ │ │ └───── Month (1-12)
│ │ └─────── Day of the month (1-31)
│ └───────── Hour (0-23)
└─────────── Minute (0-59)
Example:

arduino
Copy
Edit
0 6 * * * /home/user/backup.sh
This runs backup.sh every day at 6:00 AM.
